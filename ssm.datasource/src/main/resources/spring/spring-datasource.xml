<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd ">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:config/config.properties</value>
			</list>
		</property>
	</bean>

	<!-- 开启AOP监听 -->
	<aop:aspectj-autoproxy />

	<!-- baseData数据源 -->
	<bean id="baseDataDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${basedata.jdbc.mysql.driver}" />
		<property name="url" value="${basedata.jdbc.mysql.url}" />
		<property name="username" value="${basedata.jdbc.mysql.username}" />
		<property name="password" value="${basedata.jdbc.mysql.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
	</bean>

	<!-- ssm数据源 -->
	<bean id="ssmDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${ssm.jdbc.mysql.driver}" />
		<property name="url" value="${ssm.jdbc.mysql.url}" />
		<property name="username" value="${ssm.jdbc.mysql.username}" />
		<property name="password" value="${ssm.jdbc.mysql.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
	</bean>

	<!-- 配置多数据源 -->
	<bean id="dataSource" class="com.ssm.datasource.util.DynamicDataSource"
		lazy-init="true">
		<property name="targetDataSources">
			<map>
				<entry key="baseDataDataSource" value-ref="baseDataDataSource" />
				<entry key="ssmDataSource" value-ref="ssmDataSource" />
			</map>
		</property>
		<!-- 默认数据源，如果未指定数据源 或者指定的数据源不存在的话 默认使用这个数据源 -->
		<property name="defaultTargetDataSource" ref="baseDataDataSource" />
	</bean>
	
	<bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
		<!-- 
		AUTO->`0`("数据库ID自增") 
		INPUT->`1`(用户输入ID") 
		ID_WORKER->`2`("全局唯一ID") 
		UUID->`3`("全局唯一ID") -->
		<property name="idType" value="2" />
		<!-- 
			MYSQL->`mysql` 
			ORACLE->`oracle` 
			DB2->`db2` 
			H2->`h2` 
			HSQL->`hsql` 
			SQLITE->`sqlite` 
			POSTGRE->`postgresql` 
			SQLSERVER2005->`sqlserver2005` 
			SQLSERVER->`sqlserver` -->
		<!-- Oracle需要添加该项 -->
		<!-- <property name="dbType" value="oracle" /> -->
		<!-- 全局表为下划线命名设置 true -->
		<property name="dbColumnUnderline" value="true" />
	</bean>
	
	<bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描Mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/ssm/*/model/mapper/xml/*.xml" />
		<property name="typeAliasesPackage" value="com.ssm.*.model" />
		<property name="plugins">
			<array>
				<!-- 分页插件配置 -->
				<bean id="paginationInterceptor"
					class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">
					<property name="dialectType" value="mysql" />
				</bean>
			</array>
		</property>
		<!-- 全局配置注入 -->
		<property name="globalConfig" ref="globalConfig" />
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!--如果想要进行批量操作可加入这个属性 -->
		<constructor-arg index="1" value="BATCH" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssm.*.model.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- 配置基于注解的事物aop -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" order="2" />
</beans>